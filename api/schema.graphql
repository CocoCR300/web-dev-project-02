type User {
    id: ID!
    full_name: String!
    name: String!
}

type Transaction {
    id: ID!
    amount: Float!
    date: String!
    description: String!
    category: Category
}

type Category {
    id: ID!
    name: String!
}

type IdResult {
    id: ID!
}

input CreateUserInput {
    full_name: String!
    name: String!
    password: String!
}

input UpdateUserInput {
    full_name: String
    name: String
    password: String
}

input CreateTransactionInput {
    amount: Float!
    category_id: ID
    date: String!
    description: String!
}

input UpdateTransactionInput {
    id: ID!
    amount: Float
    category_id: ID
    date: String
    description: String
}

input CreateCategoryInput {
    name: String!
}

input UpdateCategoryInput {
    id: ID!
    name: String!
}

type Mutation {
    createUser(input: CreateUserInput!): User!
    updateSelf(input: UpdateUserInput!): User
    deleteSelf: IdResult
    

    createTransaction(input: CreateTransactionInput!): Transaction!
    updateTransaction(input: UpdateTransactionInput!): Transaction
    deleteTransaction(id: ID!): IdResult

    createCategory(input: CreateCategoryInput!): Category!
    updateCategory(input: UpdateCategoryInput!): Category
    deleteCategory(id: ID!): IdResult
}

type Query {
    me: User!
    user(id: ID!): User    
    users(limit: Int): [User!]

    transactions(limit: Int, offset: Int, search_filter: String): [Transaction!]

    categories: [Category!]
}

# type Subscription {
#   newTask: Task
# }
# 
